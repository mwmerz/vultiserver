// Code generated by tygo. DO NOT EDIT.

//////////
// source: email_request.go

export interface EmailRequest {
  email: string;
  file_name: string;
  file_content: string;
  vault_name: string;
  code: string;
}

//////////
// source: keysign.go

export interface KeysignRequest {
  public_key: string; // public key, used to identify the backup file
  messages: string[]; // Messages need to be signed
  session: string; // Session ID , it should be an UUID
  hex_encryption_key: string; // Hex encryption key, used to encrypt the keysign messages
  derive_path: string; // Derive Path
  is_ecdsa: boolean; // indicate use ECDSA or EDDSA key to sign the messages
  vault_password: string; // password used to decrypt the vault file
}

//////////
// source: migration.go

/**
 * MigrationRequest is a struct that represents a request to reshare a vault
 */
export interface MigrationRequest {
  public_key: string; // public key ecdsa
  session_id: string; // session id
  hex_encryption_key: string; // hex encryption key
  encryption_password: string; // password used to encrypt the vault file
  email: string;
}

//////////
// source: reshare.go

export type ReshareType = number /* int */;
export const Normal: ReshareType = 0;
export const Plugin: ReshareType = 1;
/**
 * ReshareRequest is a struct that represents a request to reshare a vault
 */
export interface ReshareRequest {
  name: string; // name of the vault
  public_key: string; // public key ecdsa
  session_id: string; // session id
  hex_encryption_key: string; // hex encryption key
  hex_chain_code: string; // hex chain code
  local_party_id: string; // local party id
  old_parties: string[]; // old parties
  encryption_password: string; // password used to encrypt the vault file
  email: string;
  old_reshare_prefix: string;
  lib_type: LibType;
  reshare_type: ReshareType;
}

//////////
// source: vault.go

export type LibType = number /* int */;
export const GG20: LibType = 0;
export const DKLS: LibType = 1;
/**
 * VaultCreateRequest is a struct that represents a request to create a new vault from integration.
 */
export interface VaultCreateRequest {
  name: string;
  session_id: string;
  hex_encryption_key: string; // this is the key used to encrypt and decrypt the keygen communications
  hex_chain_code: string;
  local_party_id: string; // when this field is empty , then server will generate a random local party id
  encryption_password: string; // password used to encrypt the vault file
  email: string; // this is the email of the user that the vault backup will be sent to
  lib_type: LibType; // this is the type of the vault
}
/**
 * VaultCreateResponse is a struct that represents a response to create a new vault
 * integration partner need to use this information to construct a QR Code , so vultisig device can participate in the vault creation process.
 */
export interface VaultCreateResponse {
  name: string;
  session_id: string;
  hex_encryption_key: string;
  hex_chain_code: string;
  keygen_msg: string;
}
export interface VaultGetResponse {
  name: string;
  public_key_ecdsa: string;
  public_key_eddsa: string;
  hex_chain_code: string;
  local_party_id: string;
}

//////////
// source: vault_resend.go

export interface VaultResendRequest {
  public_key_ecdsa: string;
  password: string;
  email: string;
}
